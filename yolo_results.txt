========== Evaluation Results ==========
F1ScoreResult:
Metric target: MetricTarget.BOXES
Averaging method: AveragingMethod.WEIGHTED
F1 @ 50:     0.8598
F1 @ 75:     0.8150
F1 @ thresh: [    0.85978     0.85778     0.85562     0.84861     0.83778     0.81503     0.76294     0.66066     0.45318     0.13567]
IoU thresh:  [        0.5        0.55         0.6        0.65         0.7        0.75         0.8        0.85         0.9        0.95]
F1 per class:
  0: [    0.59155     0.59155     0.59155     0.56338     0.56338     0.50704     0.47887      0.3662     0.16901           0]
  1: [    0.94156     0.94156     0.94156     0.92857     0.91558      0.9026     0.83766     0.79221     0.65584     0.27273]
  2: [    0.93805     0.93805      0.9292      0.9292      0.9115     0.88496     0.84071     0.68142     0.38053    0.079646]
  3: [    0.90909     0.90909     0.90909     0.90909     0.90909     0.86364     0.81818     0.77273     0.54545    0.090909]
  4: [    0.91071     0.89286     0.89286     0.89286     0.89286       0.875     0.82143     0.76786       0.625     0.17857]
  5: [    0.69333     0.69333     0.69333     0.69333        0.68     0.66667     0.61333        0.44     0.18667    0.013333]

Small objects:
  F1ScoreResult:
  Metric target: MetricTarget.BOXES
  Averaging method: AveragingMethod.WEIGHTED
  F1 @ 50:     0.7431
  F1 @ 75:     0.7043
  F1 @ thresh: [    0.74306     0.74306     0.74306     0.73693     0.73179     0.70433     0.65658     0.52011      0.2631    0.030284]
  IoU thresh:  [        0.5        0.55         0.6        0.65         0.7        0.75         0.8        0.85         0.9        0.95]
  F1 per class:
    0: [    0.59155     0.59155     0.59155     0.56338     0.56338     0.50704     0.47887      0.3662     0.16901           0]
    1: [    0.70588     0.70588     0.70588     0.70588     0.70588     0.70588     0.58824     0.58824     0.47059           0]
    2: [    0.85417     0.85417     0.85417     0.85417     0.85417     0.83333     0.79167       0.625     0.27083      0.0625]
    3: [    0.90909     0.90909     0.90909     0.90909     0.90909     0.86364     0.81818     0.77273     0.54545    0.090909]
    4: [          1           1           1           1           1           1           1           1           1           0]
    5: [    0.71233     0.71233     0.71233     0.71233     0.69863     0.68493     0.63014     0.45205     0.19178    0.013699]
  
Medium objects:
  F1ScoreResult:
  Metric target: MetricTarget.BOXES
  Averaging method: AveragingMethod.WEIGHTED
  F1 @ 50:     0.9297
  F1 @ 75:     0.8989
  F1 @ thresh: [    0.92972     0.92608     0.92608     0.91829      0.9144     0.89887     0.84059     0.76961      0.6052     0.22458]
  IoU thresh:  [        0.5        0.55         0.6        0.65         0.7        0.75         0.8        0.85         0.9        0.95]
  F1 per class:
    1: [    0.95804     0.95804     0.95804     0.94406     0.93706     0.92308     0.86014     0.81119     0.67133     0.29371]
    2: [    0.88525     0.88525     0.88525     0.88525     0.88525     0.86885     0.81967     0.68852     0.45902    0.098361]
    4: [    0.90566     0.88679     0.88679     0.88679     0.88679     0.86792     0.81132     0.75472     0.60377     0.18868]
  
Large objects:
  F1ScoreResult:
  Metric target: MetricTarget.BOXES
  Averaging method: AveragingMethod.WEIGHTED
  F1 @ 50:     1.0000
  F1 @ 75:     1.0000
  F1 @ thresh: [          1           1           1           1           1           1           1           1           1           0]
  IoU thresh:  [        0.5        0.55         0.6        0.65         0.7        0.75         0.8        0.85         0.9        0.95]
  F1 per class:
    4: [          1           1           1           1           1           1           1           1           1           0]
  
RecallResult:
Metric target:    MetricTarget.BOXES
Averaging method: AveragingMethod.WEIGHTED
R @ 50:     0.8195
R @ 75:     0.7780
R @ thresh: [     0.8195     0.81743     0.81535     0.80913     0.79876     0.77801     0.72822     0.63278     0.43776     0.13278]
IoU thresh: [        0.5        0.55         0.6        0.65         0.7        0.75         0.8        0.85         0.9        0.95]
Recall per class:
  0: [    0.44681     0.44681     0.44681     0.42553     0.42553     0.38298      0.3617      0.2766     0.12766           0]
  1: [    0.91772     0.91772     0.91772     0.90506     0.89241     0.87975     0.81646     0.77215     0.63924     0.26582]
  2: [    0.89831     0.89831     0.88983     0.88983     0.87288     0.84746     0.80508     0.65254     0.36441    0.076271]
  3: [    0.83333     0.83333     0.83333     0.83333     0.83333     0.79167        0.75     0.70833         0.5    0.083333]
  4: [    0.94444     0.92593     0.92593     0.92593     0.92593     0.90741     0.85185      0.7963     0.64815     0.18519]
  5: [    0.64198     0.64198     0.64198     0.64198     0.62963     0.61728      0.5679     0.40741     0.17284    0.012346]

Small objects:
  RecallResult:
  Metric target:    MetricTarget.BOXES
  Averaging method: AveragingMethod.WEIGHTED
  R @ 50:     0.6528
  R @ 75:     0.6204
  R @ thresh: [    0.65278     0.65278     0.65278     0.64815     0.64352     0.62037      0.5787     0.45833     0.23148    0.027778]
  IoU thresh: [        0.5        0.55         0.6        0.65         0.7        0.75         0.8        0.85         0.9        0.95]
  Recall per class:
    0: [    0.44681     0.44681     0.44681     0.42553     0.42553     0.38298      0.3617      0.2766     0.12766           0]
    1: [    0.54545     0.54545     0.54545     0.54545     0.54545     0.54545     0.45455     0.45455     0.36364           0]
    2: [    0.78846     0.78846     0.78846     0.78846     0.78846     0.76923     0.73077     0.57692        0.25    0.057692]
    3: [    0.83333     0.83333     0.83333     0.83333     0.83333     0.79167        0.75     0.70833         0.5    0.083333]
    4: [          1           1           1           1           1           1           1           1           1           0]
    5: [    0.64198     0.64198     0.64198     0.64198     0.62963     0.61728      0.5679     0.40741     0.17284    0.012346]
  
Medium objects:
  RecallResult:
  Metric target:    MetricTarget.BOXES
  Averaging method: AveragingMethod.WEIGHTED
  R @ 50:     0.9053
  R @ 75:     0.8750
  R @ thresh: [     0.9053     0.90152     0.90152     0.89394     0.89015       0.875     0.81818        0.75     0.59091      0.2197]
  IoU thresh: [        0.5        0.55         0.6        0.65         0.7        0.75         0.8        0.85         0.9        0.95]
  Recall per class:
    1: [    0.93197     0.93197     0.93197     0.91837     0.91156     0.89796     0.83673     0.78912     0.65306     0.28571]
    2: [    0.81818     0.81818     0.81818     0.81818     0.81818     0.80303     0.75758     0.63636     0.42424    0.090909]
    4: [    0.94118     0.92157     0.92157     0.92157     0.92157     0.90196     0.84314     0.78431     0.62745     0.19608]
  
Large objects:
  RecallResult:
  Metric target:    MetricTarget.BOXES
  Averaging method: AveragingMethod.WEIGHTED
  R @ 50:     1.0000
  R @ 75:     1.0000
  R @ thresh: [          1           1           1           1           1           1           1           1           1           0]
  IoU thresh: [        0.5        0.55         0.6        0.65         0.7        0.75         0.8        0.85         0.9        0.95]
  Recall per class:
    4: [          1           1           1           1           1           1           1           1           1           0]
  
PrecisionResult:
Metric target:    MetricTarget.BOXES
Averaging method: AveragingMethod.WEIGHTED
P @ 50:     0.9174
P @ 75:     0.8673
P @ thresh: [    0.91743     0.91549     0.91323     0.90479     0.89345      0.8673     0.81202     0.69973     0.47415     0.13892]
IoU thresh: [        0.5        0.55         0.6        0.65         0.7        0.75         0.8        0.85         0.9        0.95]
Precision per class:
  0: [      0.875       0.875       0.875     0.83333     0.83333        0.75     0.70833     0.54167        0.25           0]
  1: [    0.96667     0.96667     0.96667     0.95333        0.94     0.92667        0.86     0.81333     0.67333        0.28]
  2: [    0.98148     0.98148     0.97222     0.97222      0.9537     0.92593     0.87963     0.71296     0.39815    0.083333]
  3: [          1           1           1           1           1        0.95         0.9        0.85         0.6         0.1]
  4: [    0.87931     0.86207     0.86207     0.86207     0.86207     0.84483      0.7931     0.74138     0.60345     0.17241]
  5: [    0.75362     0.75362     0.75362     0.75362     0.73913     0.72464     0.66667     0.47826      0.2029    0.014493]

Small objects:
  PrecisionResult:
  Metric target:    MetricTarget.BOXES
  Averaging method: AveragingMethod.WEIGHTED
  P @ 50:     0.8814
  P @ 75:     0.8316
  P @ thresh: [    0.88139     0.88139     0.88139     0.87232     0.86655     0.83162     0.77449      0.6139     0.31154    0.033294]
  IoU thresh: [        0.5        0.55         0.6        0.65         0.7        0.75         0.8        0.85         0.9        0.95]
  Precision per class:
    0: [      0.875       0.875       0.875     0.83333     0.83333        0.75     0.70833     0.54167        0.25           0]
    1: [          1           1           1           1           1           1     0.83333     0.83333     0.66667           0]
    2: [    0.93182     0.93182     0.93182     0.93182     0.93182     0.90909     0.86364     0.68182     0.29545    0.068182]
    3: [          1           1           1           1           1        0.95         0.9        0.85         0.6         0.1]
    4: [          1           1           1           1           1           1           1           1           1           0]
    5: [        0.8         0.8         0.8         0.8     0.78462     0.76923     0.70769     0.50769     0.21538    0.015385]
  
Medium objects:
  PrecisionResult:
  Metric target:    MetricTarget.BOXES
  Averaging method: AveragingMethod.WEIGHTED
  P @ 50:     0.9585
  P @ 75:     0.9270
  P @ thresh: [    0.95847     0.95496     0.95496     0.94695     0.94294     0.92695     0.86697     0.79268     0.62196     0.23016]
  IoU thresh: [        0.5        0.55         0.6        0.65         0.7        0.75         0.8        0.85         0.9        0.95]
  Precision per class:
    1: [    0.98561     0.98561     0.98561     0.97122     0.96403     0.94964     0.88489     0.83453     0.69065     0.30216]
    2: [    0.96429     0.96429     0.96429     0.96429     0.96429     0.94643     0.89286        0.75         0.5     0.10714]
    4: [    0.87273     0.85455     0.85455     0.85455     0.85455     0.83636     0.78182     0.72727     0.58182     0.18182]
  
Large objects:
  PrecisionResult:
  Metric target:    MetricTarget.BOXES
  Averaging method: AveragingMethod.WEIGHTED
  P @ 50:     1.0000
  P @ 75:     1.0000
  P @ thresh: [          1           1           1           1           1           1           1           1           1           0]
  IoU thresh: [        0.5        0.55         0.6        0.65         0.7        0.75         0.8        0.85         0.9        0.95]
  Precision per class:
    4: [          1           1           1           1           1           1           1           1           1           0]
  
MeanAveragePrecisionResult:
Metric target: MetricTarget.BOXES
Class agnostic: False
mAP @ 50:95: 0.5822
mAP @ 50:    0.7564
mAP @ 75:    0.6838
mAP scores: [    0.75641     0.75074     0.74866     0.73516     0.72484     0.68378     0.62888     0.48864     0.27494    0.030167]
IoU thresh: [        0.5        0.55         0.6        0.65         0.7        0.75         0.8        0.85         0.9        0.95]
AP per class:
  0: [    0.43619     0.43619     0.43619     0.37752     0.37752     0.31047     0.29567     0.19293    0.025578           0]
  1: [    0.90868     0.90868     0.90868     0.88634     0.87596     0.85449     0.77949     0.69938      0.5144     0.11641]
  2: [    0.87979     0.87979      0.8673      0.8673     0.83832     0.80215     0.75515     0.50188     0.23895     0.01036]
  3: [    0.83168     0.83168     0.83168     0.83168     0.83168     0.74283     0.70087     0.57284     0.33489   0.0087877]
  4: [    0.92358     0.88955     0.88955     0.88955     0.88955      0.8687     0.78871     0.72208      0.4729    0.040497]
  5: [    0.55856     0.55856     0.55856     0.55856     0.53602     0.52405     0.45337     0.24273    0.062926   0.0049505]

Small objects:
  MeanAveragePrecisionResult:
  Metric target: MetricTarget.BOXES
  Class agnostic: False
  mAP @ 50:95: 0.5470
  mAP @ 50:    0.6880
  mAP @ 75:    0.6431
  mAP scores: [    0.68796     0.68796     0.68796     0.67818     0.67432     0.64306     0.60044     0.48535     0.31862   0.0063518]
  IoU thresh: [        0.5        0.55         0.6        0.65         0.7        0.75         0.8        0.85         0.9        0.95]
  AP per class:
    0: [    0.43619     0.43619     0.43619     0.37752     0.37752     0.31047     0.29567     0.19293    0.025578           0]
    1: [    0.54455     0.54455     0.54455     0.54455     0.54455     0.54455     0.45545     0.45545     0.36634           0]
    2: [     0.7033      0.7033      0.7033      0.7033      0.7033     0.68422     0.64955     0.41709     0.10324   0.0095211]
    3: [    0.83168     0.83168     0.83168     0.83168     0.83168     0.74283     0.70087     0.57284     0.33489   0.0087877]
    4: [          1           1           1           1           1           1           1           1           1           0]
    5: [    0.61203     0.61203     0.61203     0.61203     0.58884     0.57627     0.50108      0.2738    0.081697    0.019802]
  
Medium objects:
  MeanAveragePrecisionResult:
  Metric target: MetricTarget.BOXES
  Class agnostic: False
  mAP @ 50:95: 0.7115
  mAP @ 50:    0.8838
  mAP @ 75:    0.8420
  mAP scores: [    0.88384     0.87236     0.87236     0.86164     0.86149     0.84197     0.76883     0.65127     0.43885     0.06225]
  IoU thresh: [        0.5        0.55         0.6        0.65         0.7        0.75         0.8        0.85         0.9        0.95]
  AP per class:
    1: [    0.93055     0.93055     0.93055     0.89837     0.89793     0.87672     0.80194     0.71265     0.53381     0.12334]
    2: [    0.79525     0.79525     0.79525     0.79525     0.79525     0.77835     0.72373     0.52682     0.33485    0.016494]
    4: [    0.92571      0.8913      0.8913      0.8913      0.8913     0.87083      0.7808     0.71434     0.44788    0.046918]
  
Large objects:
  MeanAveragePrecisionResult:
  Metric target: MetricTarget.BOXES
  Class agnostic: False
  mAP @ 50:95: 0.9000
  mAP @ 50:    1.0000
  mAP @ 75:    1.0000
  mAP scores: [          1           1           1           1           1           1           1           1           1           0]
  IoU thresh: [        0.5        0.55         0.6        0.65         0.7        0.75         0.8        0.85         0.9        0.95]
  AP per class:
    4: [          1           1           1           1           1           1           1           1           1           0]
  
